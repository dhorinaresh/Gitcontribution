{"ast":null,"code":"// src/services/githubService.js\nexport const fetchContributions = async organization => {\n  try {\n    const repositories = await fetchRepositories(organization);\n    const contributionsMap = new Map();\n    for (const repo of repositories) {\n      const response = await fetch(`https://api.github.com/repos/${organization}/${repo.name}/contributors`, {\n        headers: {\n          Authorization: `token ${process.env.REACT_APP_GITHUB_PAT}`\n        }\n      });\n      if (!response.ok) {\n        console.error(`Error fetching contributions for ${repo.name}: ${response.status} ${response.statusText}`);\n        continue;\n      }\n      const data = await response.json();\n      data.forEach(contributor => {\n        const {\n          login,\n          contributions\n        } = contributor;\n        if (contributionsMap.has(login)) {\n          contributionsMap.set(login, contributionsMap.get(login) + contributions);\n        } else {\n          contributionsMap.set(login, contributions);\n        }\n      });\n    }\n\n    // Convert the map to an array of objects and sort by contributions in descending order\n    const sortedContributions = Array.from(contributionsMap, ([login, contributions]) => ({\n      login,\n      contributions\n    })).sort((a, b) => b.contributions - a.contributions);\n    console.log(\"Total contributions:\", sortedContributions);\n    return sortedContributions;\n  } catch (error) {\n    console.error(\"Error in fetchContributions:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["fetchContributions","organization","repositories","fetchRepositories","contributionsMap","Map","repo","response","fetch","name","headers","Authorization","process","env","REACT_APP_GITHUB_PAT","ok","console","error","status","statusText","data","json","forEach","contributor","login","contributions","has","set","get","sortedContributions","Array","from","sort","a","b","log"],"sources":["C:/Users/Naresh.D/Desktop/project/Github_Contributions_Dashboard/src/services/githubService.js"],"sourcesContent":["// src/services/githubService.js\r\nexport const fetchContributions = async (organization) => {\r\n  try {\r\n    const repositories = await fetchRepositories(organization);\r\n    const contributionsMap = new Map();\r\n\r\n    for (const repo of repositories) {\r\n      const response = await fetch(\r\n        `https://api.github.com/repos/${organization}/${repo.name}/contributors`,\r\n        {\r\n          headers: {\r\n            Authorization: `token ${process.env.REACT_APP_GITHUB_PAT}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        console.error(\r\n          `Error fetching contributions for ${repo.name}: ${response.status} ${response.statusText}`\r\n        );\r\n        continue;\r\n      }\r\n\r\n      const data = await response.json();\r\n      data.forEach((contributor) => {\r\n        const { login, contributions } = contributor;\r\n        if (contributionsMap.has(login)) {\r\n          contributionsMap.set(\r\n            login,\r\n            contributionsMap.get(login) + contributions\r\n          );\r\n        } else {\r\n          contributionsMap.set(login, contributions);\r\n        }\r\n      });\r\n    }\r\n\r\n    // Convert the map to an array of objects and sort by contributions in descending order\r\n    const sortedContributions = Array.from(\r\n      contributionsMap,\r\n      ([login, contributions]) => ({ login, contributions })\r\n    ).sort((a, b) => b.contributions - a.contributions);\r\n\r\n    console.log(\"Total contributions:\", sortedContributions);\r\n    return sortedContributions;\r\n  } catch (error) {\r\n    console.error(\"Error in fetchContributions:\", error);\r\n    return [];\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,kBAAkB,GAAG,MAAOC,YAAY,IAAK;EACxD,IAAI;IACF,MAAMC,YAAY,GAAG,MAAMC,iBAAiB,CAACF,YAAY,CAAC;IAC1D,MAAMG,gBAAgB,GAAG,IAAIC,GAAG,CAAC,CAAC;IAElC,KAAK,MAAMC,IAAI,IAAIJ,YAAY,EAAE;MAC/B,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAC1B,gCAAgCP,YAAY,IAAIK,IAAI,CAACG,IAAI,eAAe,EACxE;QACEC,OAAO,EAAE;UACPC,aAAa,EAAE,SAASC,OAAO,CAACC,GAAG,CAACC,oBAAoB;QAC1D;MACF,CACF,CAAC;MAED,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;QAChBC,OAAO,CAACC,KAAK,CACX,oCAAoCX,IAAI,CAACG,IAAI,KAAKF,QAAQ,CAACW,MAAM,IAAIX,QAAQ,CAACY,UAAU,EAC1F,CAAC;QACD;MACF;MAEA,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;MAClCD,IAAI,CAACE,OAAO,CAAEC,WAAW,IAAK;QAC5B,MAAM;UAAEC,KAAK;UAAEC;QAAc,CAAC,GAAGF,WAAW;QAC5C,IAAInB,gBAAgB,CAACsB,GAAG,CAACF,KAAK,CAAC,EAAE;UAC/BpB,gBAAgB,CAACuB,GAAG,CAClBH,KAAK,EACLpB,gBAAgB,CAACwB,GAAG,CAACJ,KAAK,CAAC,GAAGC,aAChC,CAAC;QACH,CAAC,MAAM;UACLrB,gBAAgB,CAACuB,GAAG,CAACH,KAAK,EAAEC,aAAa,CAAC;QAC5C;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,MAAMI,mBAAmB,GAAGC,KAAK,CAACC,IAAI,CACpC3B,gBAAgB,EAChB,CAAC,CAACoB,KAAK,EAAEC,aAAa,CAAC,MAAM;MAAED,KAAK;MAAEC;IAAc,CAAC,CACvD,CAAC,CAACO,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACT,aAAa,GAAGQ,CAAC,CAACR,aAAa,CAAC;IAEnDT,OAAO,CAACmB,GAAG,CAAC,sBAAsB,EAAEN,mBAAmB,CAAC;IACxD,OAAOA,mBAAmB;EAC5B,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}