{"ast":null,"code":"const REPOSITORIES = [\"LobbyClientUI-R1\", \"LobbyAdminServerAPI-R1\", \"LobbyHeartbeatAutomationUI-R1\", \"HubspotIntegrationAPI-R1\", \"LobbyMiddlewareAPI-R1\", \"LobbyAdminPanelUI-R1\", \"LobbyServerAPI-R1\"];\nconst USERS = [\"ArulTEG\", \"ArunPrem_APP\", \"deepesh-tech\", \"Mukul Kumar\", \"suneelkumar02\", \"dhorinaresh\"];\nexport async function fetchContributionData() {\n  const GITHUB_PAT = process.env.REACT_APP_GITHUB_PAT;\n  const ORG_NAME = process.env.REACT_APP_ORG_NAME;\n  let userCommitCounts = {}; // Stores commit count per user\n  let totalCommits = 0;\n  for (const repo of REPOSITORIES) {\n    const url = `https://api.github.com/repos/${ORG_NAME}/${repo}/commits`;\n    try {\n      const response = await fetch(url, {\n        headers: {\n          Authorization: `token ${GITHUB_PAT}`,\n          Accept: \"application/vnd.github.v3+json\"\n        }\n      });\n      if (!response.ok) {\n        console.error(`Error fetching commits from ${repo}: ${response.status}`);\n        continue;\n      }\n      const commits = await response.json();\n      for (const commit of commits) {\n        if (commit.author && USERS.includes(commit.author.login)) {\n          const username = commit.author.login;\n          userCommitCounts[username] = (userCommitCounts[username] || 0) + 1;\n          totalCommits++;\n        }\n      }\n    } catch (error) {\n      console.error(`Error fetching commits from ${repo}:`, error);\n    }\n  }\n\n  // Calculate contribution percentages\n  let contributionData = Object.entries(userCommitCounts).map(([user, count]) => ({\n    user,\n    count,\n    percentage: (count / totalCommits * 100).toFixed(2)\n  }));\n  return contributionData;\n}","map":{"version":3,"names":["REPOSITORIES","USERS","fetchContributionData","GITHUB_PAT","process","env","REACT_APP_GITHUB_PAT","ORG_NAME","REACT_APP_ORG_NAME","userCommitCounts","totalCommits","repo","url","response","fetch","headers","Authorization","Accept","ok","console","error","status","commits","json","commit","author","includes","login","username","contributionData","Object","entries","map","user","count","percentage","toFixed"],"sources":["C:/Users/Naresh.D/Desktop/project/Github_Contributions_Dashboard/src/services/fetchCommits.js"],"sourcesContent":["const REPOSITORIES = [\r\n  \"LobbyClientUI-R1\",\r\n  \"LobbyAdminServerAPI-R1\",\r\n  \"LobbyHeartbeatAutomationUI-R1\",\r\n  \"HubspotIntegrationAPI-R1\",\r\n  \"LobbyMiddlewareAPI-R1\",\r\n  \"LobbyAdminPanelUI-R1\",\r\n  \"LobbyServerAPI-R1\",\r\n];\r\n\r\nconst USERS = [\r\n  \"ArulTEG\",\r\n  \"ArunPrem_APP\",\r\n  \"deepesh-tech\",\r\n  \"Mukul Kumar\",\r\n  \"suneelkumar02\",\r\n  \"dhorinaresh\",\r\n];\r\n\r\nexport async function fetchContributionData() {\r\n  const GITHUB_PAT = process.env.REACT_APP_GITHUB_PAT;\r\n  const ORG_NAME = process.env.REACT_APP_ORG_NAME;\r\n\r\n  let userCommitCounts = {}; // Stores commit count per user\r\n  let totalCommits = 0;\r\n\r\n  for (const repo of REPOSITORIES) {\r\n    const url = `https://api.github.com/repos/${ORG_NAME}/${repo}/commits`;\r\n\r\n    try {\r\n      const response = await fetch(url, {\r\n        headers: {\r\n          Authorization: `token ${GITHUB_PAT}`,\r\n          Accept: \"application/vnd.github.v3+json\",\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.error(\r\n          `Error fetching commits from ${repo}: ${response.status}`\r\n        );\r\n        continue;\r\n      }\r\n\r\n      const commits = await response.json();\r\n\r\n      for (const commit of commits) {\r\n        if (commit.author && USERS.includes(commit.author.login)) {\r\n          const username = commit.author.login;\r\n          userCommitCounts[username] = (userCommitCounts[username] || 0) + 1;\r\n          totalCommits++;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching commits from ${repo}:`, error);\r\n    }\r\n  }\r\n\r\n  // Calculate contribution percentages\r\n  let contributionData = Object.entries(userCommitCounts).map(\r\n    ([user, count]) => ({\r\n      user,\r\n      count,\r\n      percentage: ((count / totalCommits) * 100).toFixed(2),\r\n    })\r\n  );\r\n\r\n  return contributionData;\r\n}\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,CACnB,kBAAkB,EAClB,wBAAwB,EACxB,+BAA+B,EAC/B,0BAA0B,EAC1B,uBAAuB,EACvB,sBAAsB,EACtB,mBAAmB,CACpB;AAED,MAAMC,KAAK,GAAG,CACZ,SAAS,EACT,cAAc,EACd,cAAc,EACd,aAAa,EACb,eAAe,EACf,aAAa,CACd;AAED,OAAO,eAAeC,qBAAqBA,CAAA,EAAG;EAC5C,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB;EACnD,MAAMC,QAAQ,GAAGH,OAAO,CAACC,GAAG,CAACG,kBAAkB;EAE/C,IAAIC,gBAAgB,GAAG,CAAC,CAAC,CAAC,CAAC;EAC3B,IAAIC,YAAY,GAAG,CAAC;EAEpB,KAAK,MAAMC,IAAI,IAAIX,YAAY,EAAE;IAC/B,MAAMY,GAAG,GAAG,gCAAgCL,QAAQ,IAAII,IAAI,UAAU;IAEtE,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;QAChCG,OAAO,EAAE;UACPC,aAAa,EAAE,SAASb,UAAU,EAAE;UACpCc,MAAM,EAAE;QACV;MACF,CAAC,CAAC;MAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;QAChBC,OAAO,CAACC,KAAK,CACX,+BAA+BT,IAAI,KAAKE,QAAQ,CAACQ,MAAM,EACzD,CAAC;QACD;MACF;MAEA,MAAMC,OAAO,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAErC,KAAK,MAAMC,MAAM,IAAIF,OAAO,EAAE;QAC5B,IAAIE,MAAM,CAACC,MAAM,IAAIxB,KAAK,CAACyB,QAAQ,CAACF,MAAM,CAACC,MAAM,CAACE,KAAK,CAAC,EAAE;UACxD,MAAMC,QAAQ,GAAGJ,MAAM,CAACC,MAAM,CAACE,KAAK;UACpClB,gBAAgB,CAACmB,QAAQ,CAAC,GAAG,CAACnB,gBAAgB,CAACmB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;UAClElB,YAAY,EAAE;QAChB;MACF;IACF,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,+BAA+BT,IAAI,GAAG,EAAES,KAAK,CAAC;IAC9D;EACF;;EAEA;EACA,IAAIS,gBAAgB,GAAGC,MAAM,CAACC,OAAO,CAACtB,gBAAgB,CAAC,CAACuB,GAAG,CACzD,CAAC,CAACC,IAAI,EAAEC,KAAK,CAAC,MAAM;IAClBD,IAAI;IACJC,KAAK;IACLC,UAAU,EAAE,CAAED,KAAK,GAAGxB,YAAY,GAAI,GAAG,EAAE0B,OAAO,CAAC,CAAC;EACtD,CAAC,CACH,CAAC;EAED,OAAOP,gBAAgB;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}