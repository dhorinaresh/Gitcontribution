{"ast":null,"code":"// src/services/githubService.js\nexport const fetchRepositories = async organization => {\n  try {\n    const response = await fetch(`https://api.github.com/orgs/${organization}/repos?per_page=100`, {\n      headers: {\n        Authorization: `token ${process.env.REACT_APP_GITHUB_PAT}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Error fetching repositories: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log(\"Fetched repositories:\", data);\n    return data;\n  } catch (error) {\n    console.error(\"Error in fetchRepositories:\", error);\n    return [];\n  }\n};\nexport const fetchContributions = async organization => {\n  try {\n    const repositories = await fetchRepositories(organization);\n    const contributions = [];\n    for (const repo of repositories) {\n      const response = await fetch(`https://api.github.com/repos/${organization}/${repo.name}/contributors`, {\n        headers: {\n          Authorization: `token ${process.env.REACT_APP_GITHUB_PAT}`\n        }\n      });\n      if (!response.ok) {\n        console.error(`Error fetching contributions for ${repo.name}: ${response.status} ${response.statusText}`);\n        continue;\n      }\n      const data = await response.json();\n      console.log(`Contributions for ${repo.name}:`, data);\n      contributions.push(...data);\n    }\n    console.log(\"Total contributions:\", contributions);\n    return contributions;\n  } catch (error) {\n    console.error(\"Error in fetchContributions:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["fetchRepositories","organization","response","fetch","headers","Authorization","process","env","REACT_APP_GITHUB_PAT","ok","Error","status","statusText","data","json","console","log","error","fetchContributions","repositories","contributions","repo","name","push"],"sources":["C:/Users/Naresh.D/Desktop/project/Github_Contributions_Dashboard/src/services/githubService.js"],"sourcesContent":["// src/services/githubService.js\r\nexport const fetchRepositories = async (organization) => {\r\n  try {\r\n    const response = await fetch(\r\n      `https://api.github.com/orgs/${organization}/repos?per_page=100`,\r\n      {\r\n        headers: {\r\n          Authorization: `token ${process.env.REACT_APP_GITHUB_PAT}`,\r\n        },\r\n      }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\r\n        `Error fetching repositories: ${response.status} ${response.statusText}`\r\n      );\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log(\"Fetched repositories:\", data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"Error in fetchRepositories:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const fetchContributions = async (organization) => {\r\n  try {\r\n    const repositories = await fetchRepositories(organization);\r\n    const contributions = [];\r\n\r\n    for (const repo of repositories) {\r\n      const response = await fetch(\r\n        `https://api.github.com/repos/${organization}/${repo.name}/contributors`,\r\n        {\r\n          headers: {\r\n            Authorization: `token ${process.env.REACT_APP_GITHUB_PAT}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        console.error(\r\n          `Error fetching contributions for ${repo.name}: ${response.status} ${response.statusText}`\r\n        );\r\n        continue;\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(`Contributions for ${repo.name}:`, data);\r\n      contributions.push(...data);\r\n    }\r\n\r\n    console.log(\"Total contributions:\", contributions);\r\n    return contributions;\r\n  } catch (error) {\r\n    console.error(\"Error in fetchContributions:\", error);\r\n    return [];\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,iBAAiB,GAAG,MAAOC,YAAY,IAAK;EACvD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,+BAA+BF,YAAY,qBAAqB,EAChE;MACEG,OAAO,EAAE;QACPC,aAAa,EAAE,SAASC,OAAO,CAACC,GAAG,CAACC,oBAAoB;MAC1D;IACF,CACF,CAAC;IAED,IAAI,CAACN,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CACb,gCAAgCR,QAAQ,CAACS,MAAM,IAAIT,QAAQ,CAACU,UAAU,EACxE,CAAC;IACH;IAEA,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEH,IAAI,CAAC;IAC1C,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG,MAAOjB,YAAY,IAAK;EACxD,IAAI;IACF,MAAMkB,YAAY,GAAG,MAAMnB,iBAAiB,CAACC,YAAY,CAAC;IAC1D,MAAMmB,aAAa,GAAG,EAAE;IAExB,KAAK,MAAMC,IAAI,IAAIF,YAAY,EAAE;MAC/B,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAC1B,gCAAgCF,YAAY,IAAIoB,IAAI,CAACC,IAAI,eAAe,EACxE;QACElB,OAAO,EAAE;UACPC,aAAa,EAAE,SAASC,OAAO,CAACC,GAAG,CAACC,oBAAoB;QAC1D;MACF,CACF,CAAC;MAED,IAAI,CAACN,QAAQ,CAACO,EAAE,EAAE;QAChBM,OAAO,CAACE,KAAK,CACX,oCAAoCI,IAAI,CAACC,IAAI,KAAKpB,QAAQ,CAACS,MAAM,IAAIT,QAAQ,CAACU,UAAU,EAC1F,CAAC;QACD;MACF;MAEA,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,qBAAqBK,IAAI,CAACC,IAAI,GAAG,EAAET,IAAI,CAAC;MACpDO,aAAa,CAACG,IAAI,CAAC,GAAGV,IAAI,CAAC;IAC7B;IAEAE,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEI,aAAa,CAAC;IAClD,OAAOA,aAAa;EACtB,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}