{"ast":null,"code":"export async function fetchContributionData(selectedOrg, selectedRepo, selectedUser) {\n  if (!selectedOrg || !selectedRepo || !selectedUser) {\n    console.error(\"❌ Missing filters: Organization, Repository, or User not selected.\");\n    return [];\n  }\n  const TOKEN = process.env.REACT_APP_GITHUB_PAT; // Ensure .env has this\n  const url = `https://api.github.com/repos/${selectedOrg}/${selectedRepo}/commits?author=${selectedUser}`;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: `token ${TOKEN}`\n      }\n    });\n    if (!response.ok) {\n      console.error(`❌ Failed to fetch data for ${selectedRepo}:`, response.statusText);\n      return [];\n    }\n    const data = await response.json();\n    return data.map(commit => ({\n      commit_id: commit.sha,\n      message: commit.commit.message,\n      date: commit.commit.author.date\n    }));\n  } catch (error) {\n    console.error(`❌ Error fetching commits for ${selectedRepo}:`, error);\n    return [];\n  }\n}","map":{"version":3,"names":["fetchContributionData","selectedOrg","selectedRepo","selectedUser","console","error","TOKEN","process","env","REACT_APP_GITHUB_PAT","url","response","fetch","headers","Authorization","ok","statusText","data","json","map","commit","commit_id","sha","message","date","author"],"sources":["C:/Users/Naresh.D/Downloads/Github_Contributions_Dashboard/src/services/fetchCommits.js"],"sourcesContent":["export async function fetchContributionData(selectedOrg, selectedRepo, selectedUser) {\r\n    if (!selectedOrg || !selectedRepo || !selectedUser) {\r\n        console.error(\"❌ Missing filters: Organization, Repository, or User not selected.\");\r\n        return [];\r\n    }\r\n\r\n    const TOKEN = process.env.REACT_APP_GITHUB_PAT; // Ensure .env has this\r\n    const url = `https://api.github.com/repos/${selectedOrg}/${selectedRepo}/commits?author=${selectedUser}`;\r\n\r\n    try {\r\n        const response = await fetch(url, {\r\n            headers: { Authorization: `token ${TOKEN}` },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            console.error(`❌ Failed to fetch data for ${selectedRepo}:`, response.statusText);\r\n            return [];\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data.map(commit => ({\r\n            commit_id: commit.sha,\r\n            message: commit.commit.message,\r\n            date: commit.commit.author.date\r\n        }));\r\n\r\n    } catch (error) {\r\n        console.error(`❌ Error fetching commits for ${selectedRepo}:`, error);\r\n        return [];\r\n    }\r\n}\r\n"],"mappings":"AAAA,OAAO,eAAeA,qBAAqBA,CAACC,WAAW,EAAEC,YAAY,EAAEC,YAAY,EAAE;EACjF,IAAI,CAACF,WAAW,IAAI,CAACC,YAAY,IAAI,CAACC,YAAY,EAAE;IAChDC,OAAO,CAACC,KAAK,CAAC,oEAAoE,CAAC;IACnF,OAAO,EAAE;EACb;EAEA,MAAMC,KAAK,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,CAAC,CAAC;EAChD,MAAMC,GAAG,GAAG,gCAAgCT,WAAW,IAAIC,YAAY,mBAAmBC,YAAY,EAAE;EAExG,IAAI;IACA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;MAC9BG,OAAO,EAAE;QAAEC,aAAa,EAAE,SAASR,KAAK;MAAG;IAC/C,CAAC,CAAC;IAEF,IAAI,CAACK,QAAQ,CAACI,EAAE,EAAE;MACdX,OAAO,CAACC,KAAK,CAAC,8BAA8BH,YAAY,GAAG,EAAES,QAAQ,CAACK,UAAU,CAAC;MACjF,OAAO,EAAE;IACb;IAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,GAAG,CAACC,MAAM,KAAK;MACvBC,SAAS,EAAED,MAAM,CAACE,GAAG;MACrBC,OAAO,EAAEH,MAAM,CAACA,MAAM,CAACG,OAAO;MAC9BC,IAAI,EAAEJ,MAAM,CAACA,MAAM,CAACK,MAAM,CAACD;IAC/B,CAAC,CAAC,CAAC;EAEP,CAAC,CAAC,OAAOnB,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,gCAAgCH,YAAY,GAAG,EAAEG,KAAK,CAAC;IACrE,OAAO,EAAE;EACb;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}