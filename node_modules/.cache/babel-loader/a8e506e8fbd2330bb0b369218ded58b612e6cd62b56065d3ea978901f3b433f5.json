{"ast":null,"code":"export async function fetchContributionData() {\n  const USERS = [\"ArulTEG\", \"ArunPrem_APP\", \"deepesh-tech\", \"Mukul Kumar\", \"suneelkumar02\", \"dhorinaresh\"];\n  const REPOSITORIES = [\"LobbyClientUI-R1\", \"LobbyAdminServerAPI-R1\", \"LobbyHeartbeatAutomationUI-R1\", \"HubspotIntegrationAPI-R1\", \"LobbyMiddlewareAPI-R1\", \"LobbyAdminPanelUI-R1\", \"LobbyServerAPI-R1\"];\n  const ORG_NAME = \"HWAI-CST\"; // Change this if needed\n  const TOKEN = process.env.REACT_APP_GITHUB_PAT; // Ensure your .env file has this\n\n  // Get the date one year ago from today\n  const oneYearAgo = new Date();\n  oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\n  const sinceDate = oneYearAgo.toISOString(); // Convert to GitHub API format\n\n  let contributions = [];\n  for (const repo of REPOSITORIES) {\n    const url = `https://api.github.com/repos/${ORG_NAME}/${repo}/commits?since=${sinceDate}`;\n    try {\n      const response = await fetch(url, {\n        headers: {\n          Authorization: `token ${TOKEN}`\n        }\n      });\n      if (!response.ok) {\n        console.error(`❌ Failed to fetch data for ${repo}:`, response.statusText);\n        continue;\n      }\n      const data = await response.json();\n      data.forEach(commit => {\n        if (commit.author && USERS.includes(commit.author.login)) {\n          const username = commit.author.login;\n          const existingEntry = contributions.find(entry => entry.user === username && entry.repository === repo);\n          if (existingEntry) {\n            existingEntry.count += 1;\n          } else {\n            contributions.push({\n              user: username,\n              repository: repo,\n              count: 1\n            });\n          }\n        }\n      });\n    } catch (error) {\n      console.error(`❌ Error fetching commits for ${repo}:`, error);\n    }\n  }\n\n  // Calculate total commits for percentage\n  const totalCommits = contributions.reduce((sum, entry) => sum + entry.count, 0);\n  contributions = contributions.map(entry => ({\n    ...entry,\n    percentage: totalCommits > 0 ? (entry.count / totalCommits * 100).toFixed(2) : 0\n  }));\n  console.log(\"✅ Final Contribution Data (Last 1 Year Only):\", contributions);\n  return contributions;\n}","map":{"version":3,"names":["fetchContributionData","USERS","REPOSITORIES","ORG_NAME","TOKEN","process","env","REACT_APP_GITHUB_PAT","oneYearAgo","Date","setFullYear","getFullYear","sinceDate","toISOString","contributions","repo","url","response","fetch","headers","Authorization","ok","console","error","statusText","data","json","forEach","commit","author","includes","login","username","existingEntry","find","entry","user","repository","count","push","totalCommits","reduce","sum","map","percentage","toFixed","log"],"sources":["C:/Users/Naresh.D/Downloads/Github_Contributions_Dashboard/src/services/fetchCommits.js"],"sourcesContent":["export async function fetchContributionData() {\r\n    const USERS = [\r\n        \"ArulTEG\",\r\n        \"ArunPrem_APP\",\r\n        \"deepesh-tech\",\r\n        \"Mukul Kumar\",\r\n        \"suneelkumar02\",\r\n        \"dhorinaresh\"\r\n    ];\r\n    const REPOSITORIES = [\r\n        \"LobbyClientUI-R1\",\r\n        \"LobbyAdminServerAPI-R1\",\r\n        \"LobbyHeartbeatAutomationUI-R1\",\r\n        \"HubspotIntegrationAPI-R1\",\r\n        \"LobbyMiddlewareAPI-R1\",\r\n        \"LobbyAdminPanelUI-R1\",\r\n        \"LobbyServerAPI-R1\"\r\n    ];\r\n    const ORG_NAME = \"HWAI-CST\"; // Change this if needed\r\n    const TOKEN = process.env.REACT_APP_GITHUB_PAT; // Ensure your .env file has this\r\n\r\n    // Get the date one year ago from today\r\n    const oneYearAgo = new Date();\r\n    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\r\n    const sinceDate = oneYearAgo.toISOString(); // Convert to GitHub API format\r\n\r\n    let contributions = [];\r\n\r\n    for (const repo of REPOSITORIES) {\r\n        const url = `https://api.github.com/repos/${ORG_NAME}/${repo}/commits?since=${sinceDate}`;\r\n\r\n        try {\r\n            const response = await fetch(url, {\r\n                headers: { Authorization: `token ${TOKEN}` }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                console.error(`❌ Failed to fetch data for ${repo}:`, response.statusText);\r\n                continue;\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            data.forEach(commit => {\r\n                if (commit.author && USERS.includes(commit.author.login)) {\r\n                    const username = commit.author.login;\r\n                    const existingEntry = contributions.find(entry => entry.user === username && entry.repository === repo);\r\n\r\n                    if (existingEntry) {\r\n                        existingEntry.count += 1;\r\n                    } else {\r\n                        contributions.push({\r\n                            user: username,\r\n                            repository: repo,\r\n                            count: 1\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error(`❌ Error fetching commits for ${repo}:`, error);\r\n        }\r\n    }\r\n\r\n    // Calculate total commits for percentage\r\n    const totalCommits = contributions.reduce((sum, entry) => sum + entry.count, 0);\r\n    contributions = contributions.map(entry => ({\r\n        ...entry,\r\n        percentage: totalCommits > 0 ? ((entry.count / totalCommits) * 100).toFixed(2) : 0\r\n    }));\r\n\r\n    console.log(\"✅ Final Contribution Data (Last 1 Year Only):\", contributions);\r\n    return contributions;\r\n}\r\n"],"mappings":"AAAA,OAAO,eAAeA,qBAAqBA,CAAA,EAAG;EAC1C,MAAMC,KAAK,GAAG,CACV,SAAS,EACT,cAAc,EACd,cAAc,EACd,aAAa,EACb,eAAe,EACf,aAAa,CAChB;EACD,MAAMC,YAAY,GAAG,CACjB,kBAAkB,EAClB,wBAAwB,EACxB,+BAA+B,EAC/B,0BAA0B,EAC1B,uBAAuB,EACvB,sBAAsB,EACtB,mBAAmB,CACtB;EACD,MAAMC,QAAQ,GAAG,UAAU,CAAC,CAAC;EAC7B,MAAMC,KAAK,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,CAAC,CAAC;;EAEhD;EACA,MAAMC,UAAU,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC7BD,UAAU,CAACE,WAAW,CAACF,UAAU,CAACG,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;EACpD,MAAMC,SAAS,GAAGJ,UAAU,CAACK,WAAW,CAAC,CAAC,CAAC,CAAC;;EAE5C,IAAIC,aAAa,GAAG,EAAE;EAEtB,KAAK,MAAMC,IAAI,IAAIb,YAAY,EAAE;IAC7B,MAAMc,GAAG,GAAG,gCAAgCb,QAAQ,IAAIY,IAAI,kBAAkBH,SAAS,EAAE;IAEzF,IAAI;MACA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;QAC9BG,OAAO,EAAE;UAAEC,aAAa,EAAE,SAAShB,KAAK;QAAG;MAC/C,CAAC,CAAC;MAEF,IAAI,CAACa,QAAQ,CAACI,EAAE,EAAE;QACdC,OAAO,CAACC,KAAK,CAAC,8BAA8BR,IAAI,GAAG,EAAEE,QAAQ,CAACO,UAAU,CAAC;QACzE;MACJ;MAEA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAElCD,IAAI,CAACE,OAAO,CAACC,MAAM,IAAI;QACnB,IAAIA,MAAM,CAACC,MAAM,IAAI5B,KAAK,CAAC6B,QAAQ,CAACF,MAAM,CAACC,MAAM,CAACE,KAAK,CAAC,EAAE;UACtD,MAAMC,QAAQ,GAAGJ,MAAM,CAACC,MAAM,CAACE,KAAK;UACpC,MAAME,aAAa,GAAGnB,aAAa,CAACoB,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,KAAKJ,QAAQ,IAAIG,KAAK,CAACE,UAAU,KAAKtB,IAAI,CAAC;UAEvG,IAAIkB,aAAa,EAAE;YACfA,aAAa,CAACK,KAAK,IAAI,CAAC;UAC5B,CAAC,MAAM;YACHxB,aAAa,CAACyB,IAAI,CAAC;cACfH,IAAI,EAAEJ,QAAQ;cACdK,UAAU,EAAEtB,IAAI;cAChBuB,KAAK,EAAE;YACX,CAAC,CAAC;UACN;QACJ;MACJ,CAAC,CAAC;IACN,CAAC,CAAC,OAAOf,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,gCAAgCR,IAAI,GAAG,EAAEQ,KAAK,CAAC;IACjE;EACJ;;EAEA;EACA,MAAMiB,YAAY,GAAG1B,aAAa,CAAC2B,MAAM,CAAC,CAACC,GAAG,EAAEP,KAAK,KAAKO,GAAG,GAAGP,KAAK,CAACG,KAAK,EAAE,CAAC,CAAC;EAC/ExB,aAAa,GAAGA,aAAa,CAAC6B,GAAG,CAACR,KAAK,KAAK;IACxC,GAAGA,KAAK;IACRS,UAAU,EAAEJ,YAAY,GAAG,CAAC,GAAG,CAAEL,KAAK,CAACG,KAAK,GAAGE,YAAY,GAAI,GAAG,EAAEK,OAAO,CAAC,CAAC,CAAC,GAAG;EACrF,CAAC,CAAC,CAAC;EAEHvB,OAAO,CAACwB,GAAG,CAAC,+CAA+C,EAAEhC,aAAa,CAAC;EAC3E,OAAOA,aAAa;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}