{"ast":null,"code":"export async function fetchContributionData(selectedOrg, selectedUser, selectedRepo) {\n  const ORGANIZATIONS = {\n    \"HWAI-CST\": {\n      users: [\"ArulTEG\", \"ArunPrem_APP\", \"deepesh-tech\", \"Mukul Kumar\", \"suneelkumar02\", \"dhorinaresh\"],\n      repositories: [\"LobbyClientUI-R1\", \"LobbyAdminServerAPI-R1\", \"LobbyHeartbeatAutomationUI-R1\", \"HubspotIntegrationAPI-R1\", \"LobbyMiddlewareAPI-R1\", \"LobbyAdminPanelUI-R1\", \"LobbyServerAPI-R1\"]\n    },\n    \"HWAI-ProductIntel\": {\n      users: [\"ankit_sde@hwai\", \"ArulTEG\", \"bindu-e\", \"Kritika-sharma12\", \"Mukul Kumar\", \"Promod Kr Verma\", \"satyajeet-HealthworksAI\", \"Rajeev Rawat\", \"vibhore-go\", \"vidushi-chaudhary\"],\n      repositories: [\"ChatbotEOCUI-R1\", \"ChatbotEOCAPI-R1\", \"ChatbotEOCModel-R1\", \"PlanComparisonUI-R4\", \"PlanComparisonAPI-R4\"]\n    }\n  };\n  if (!selectedOrg || !ORGANIZATIONS[selectedOrg]) {\n    console.error(\"❌ Invalid Organization Selected\");\n    return [];\n  }\n  const USERS = ORGANIZATIONS[selectedOrg].users;\n  const REPOSITORIES = ORGANIZATIONS[selectedOrg].repositories;\n  const TOKEN = process.env.REACT_APP_GITHUB_PAT;\n  if (!USERS.includes(selectedUser) || !REPOSITORIES.includes(selectedRepo)) {\n    console.error(\"❌ Invalid User or Repository Selected\");\n    return [];\n  }\n\n  // Get commits from the last year\n  const oneYearAgo = new Date();\n  oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\n  const sinceDate = oneYearAgo.toISOString();\n  let contributions = [];\n  const url = `https://api.github.com/repos/${selectedOrg}/${selectedRepo}/commits?since=${sinceDate}`;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: `token ${TOKEN}`\n      }\n    });\n    if (!response.ok) {\n      console.error(`❌ Failed to fetch data for ${selectedRepo}:`, response.statusText);\n      return [];\n    }\n    const data = await response.json();\n    data.forEach(commit => {\n      if (commit.author && commit.author.login === selectedUser) {\n        const username = commit.author.login;\n        const existingEntry = contributions.find(entry => entry.user === username);\n        if (existingEntry) {\n          existingEntry.count += 1;\n        } else {\n          contributions.push({\n            user: username,\n            repository: selectedRepo,\n            count: 1\n          });\n        }\n      }\n    });\n  } catch (error) {\n    console.error(`❌ Error fetching commits for ${selectedRepo}:`, error);\n  }\n  return contributions;\n}","map":{"version":3,"names":["fetchContributionData","selectedOrg","selectedUser","selectedRepo","ORGANIZATIONS","users","repositories","console","error","USERS","REPOSITORIES","TOKEN","process","env","REACT_APP_GITHUB_PAT","includes","oneYearAgo","Date","setFullYear","getFullYear","sinceDate","toISOString","contributions","url","response","fetch","headers","Authorization","ok","statusText","data","json","forEach","commit","author","login","username","existingEntry","find","entry","user","count","push","repository"],"sources":["C:/Users/Naresh.D/Downloads/Github_Contributions_Dashboard/src/services/fetchCommits.js"],"sourcesContent":["export async function fetchContributionData(selectedOrg, selectedUser, selectedRepo) {\r\n    const ORGANIZATIONS = {\r\n        \"HWAI-CST\": {\r\n            users: [\r\n                \"ArulTEG\", \"ArunPrem_APP\", \"deepesh-tech\", \r\n                \"Mukul Kumar\", \"suneelkumar02\", \"dhorinaresh\"\r\n            ],\r\n            repositories: [\r\n                \"LobbyClientUI-R1\", \"LobbyAdminServerAPI-R1\", \r\n                \"LobbyHeartbeatAutomationUI-R1\", \"HubspotIntegrationAPI-R1\",\r\n                \"LobbyMiddlewareAPI-R1\", \"LobbyAdminPanelUI-R1\", \r\n                \"LobbyServerAPI-R1\"\r\n            ]\r\n        },\r\n        \"HWAI-ProductIntel\": {\r\n            users: [\r\n                \"ankit_sde@hwai\", \"ArulTEG\", \"bindu-e\", \"Kritika-sharma12\", \r\n                \"Mukul Kumar\", \"Promod Kr Verma\", \"satyajeet-HealthworksAI\", \r\n                \"Rajeev Rawat\", \"vibhore-go\", \"vidushi-chaudhary\"\r\n            ],\r\n            repositories: [\r\n                \"ChatbotEOCUI-R1\", \"ChatbotEOCAPI-R1\", \"ChatbotEOCModel-R1\",\r\n                \"PlanComparisonUI-R4\", \"PlanComparisonAPI-R4\"\r\n            ]\r\n        }\r\n    };\r\n\r\n    if (!selectedOrg || !ORGANIZATIONS[selectedOrg]) {\r\n        console.error(\"❌ Invalid Organization Selected\");\r\n        return [];\r\n    }\r\n\r\n    const USERS = ORGANIZATIONS[selectedOrg].users;\r\n    const REPOSITORIES = ORGANIZATIONS[selectedOrg].repositories;\r\n    const TOKEN = process.env.REACT_APP_GITHUB_PAT;\r\n\r\n    if (!USERS.includes(selectedUser) || !REPOSITORIES.includes(selectedRepo)) {\r\n        console.error(\"❌ Invalid User or Repository Selected\");\r\n        return [];\r\n    }\r\n\r\n    // Get commits from the last year\r\n    const oneYearAgo = new Date();\r\n    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\r\n    const sinceDate = oneYearAgo.toISOString();\r\n\r\n    let contributions = [];\r\n    const url = `https://api.github.com/repos/${selectedOrg}/${selectedRepo}/commits?since=${sinceDate}`;\r\n\r\n    try {\r\n        const response = await fetch(url, {\r\n            headers: { Authorization: `token ${TOKEN}` }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            console.error(`❌ Failed to fetch data for ${selectedRepo}:`, response.statusText);\r\n            return [];\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        data.forEach(commit => {\r\n            if (commit.author && commit.author.login === selectedUser) {\r\n                const username = commit.author.login;\r\n                const existingEntry = contributions.find(entry => entry.user === username);\r\n\r\n                if (existingEntry) {\r\n                    existingEntry.count += 1;\r\n                } else {\r\n                    contributions.push({\r\n                        user: username,\r\n                        repository: selectedRepo,\r\n                        count: 1\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error(`❌ Error fetching commits for ${selectedRepo}:`, error);\r\n    }\r\n\r\n    return contributions;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}