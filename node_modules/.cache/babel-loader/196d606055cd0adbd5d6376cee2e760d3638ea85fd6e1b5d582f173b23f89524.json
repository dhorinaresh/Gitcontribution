{"ast":null,"code":"export async function fetchContributionData(selectedOrg) {\n  const ORGANIZATIONS = {\n    \"HWAI-CST\": {\n      users: [\"ArulTEG\", \"ArunPrem_APP\", \"deepesh-tech\", \"Mukul Kumar\", \"suneelkumar02\", \"dhorinaresh\"],\n      repositories: [\"LobbyClientUI-R1\", \"LobbyAdminServerAPI-R1\", \"LobbyHeartbeatAutomationUI-R1\", \"HubspotIntegrationAPI-R1\", \"LobbyMiddlewareAPI-R1\", \"LobbyAdminPanelUI-R1\", \"LobbyServerAPI-R1\"]\n    },\n    \"HWAI-ProductIntel\": {\n      users: [\"ankit_sde@hwai\", \"ArulTEG\", \"bindu-e\", \"Kritika-sharma12\", \"Mukul Kumar\", \"Promod Kr Verma\", \"satyajeet-HealthworksAI\", \"Rajeev Rawat\", \"vibhore-go\", \"vidushi-chaudhary\"],\n      repositories: [\"ChatbotEOCUI-R1\", \"ChatbotEOCAPI-R1\", \"ChatbotEOCModel-R1\", \"PlanComparisonUI-R4\", \"PlanComparisonAPI-R4\"]\n    }\n  };\n  if (!selectedOrg || !ORGANIZATIONS[selectedOrg]) {\n    console.error(\"❌ Invalid Organization Selected\");\n    return [];\n  }\n  const USERS = ORGANIZATIONS[selectedOrg].users;\n  const REPOSITORIES = ORGANIZATIONS[selectedOrg].repositories;\n  const TOKEN = process.env.REACT_APP_GITHUB_PAT; // Ensure your .env file has this\n\n  // Get commits from the last year\n  const oneYearAgo = new Date();\n  oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\n  const sinceDate = oneYearAgo.toISOString();\n  let contributions = [];\n  for (const repo of REPOSITORIES) {\n    const url = `https://api.github.com/repos/${selectedOrg}/${repo}/commits?since=${sinceDate}`;\n    try {\n      const response = await fetch(url, {\n        headers: {\n          Authorization: `token ${TOKEN}`\n        }\n      });\n      if (!response.ok) {\n        console.error(`❌ Failed to fetch data for ${repo}:`, response.statusText);\n        continue;\n      }\n      const data = await response.json();\n      data.forEach(commit => {\n        if (commit.author && USERS.includes(commit.author.login)) {\n          const username = commit.author.login;\n          const existingEntry = contributions.find(entry => entry.user === username && entry.repository === repo);\n          if (existingEntry) {\n            existingEntry.count += 1;\n          } else {\n            contributions.push({\n              user: username,\n              repository: repo,\n              count: 1\n            });\n          }\n        }\n      });\n    } catch (error) {\n      console.error(`❌ Error fetching commits for ${repo}:`, error);\n    }\n  }\n\n  // Calculate total commits for percentage\n  const totalCommits = contributions.reduce((sum, entry) => sum + entry.count, 0);\n  contributions = contributions.map(entry => ({\n    ...entry,\n    percentage: totalCommits > 0 ? (entry.count / totalCommits * 100).toFixed(2) : 0\n  }));\n  console.log(`✅ Final Contribution Data for ${selectedOrg}:`, contributions);\n  return contributions;\n}","map":{"version":3,"names":["fetchContributionData","selectedOrg","ORGANIZATIONS","users","repositories","console","error","USERS","REPOSITORIES","TOKEN","process","env","REACT_APP_GITHUB_PAT","oneYearAgo","Date","setFullYear","getFullYear","sinceDate","toISOString","contributions","repo","url","response","fetch","headers","Authorization","ok","statusText","data","json","forEach","commit","author","includes","login","username","existingEntry","find","entry","user","repository","count","push","totalCommits","reduce","sum","map","percentage","toFixed","log"],"sources":["C:/Users/Naresh.D/Downloads/Github_Contributions_Dashboard/src/services/fetchCommits.js"],"sourcesContent":["export async function fetchContributionData(selectedOrg) {\r\n    const ORGANIZATIONS = {\r\n        \"HWAI-CST\": {\r\n            users: [\r\n                \"ArulTEG\", \"ArunPrem_APP\", \"deepesh-tech\", \r\n                \"Mukul Kumar\", \"suneelkumar02\", \"dhorinaresh\"\r\n            ],\r\n            repositories: [\r\n                \"LobbyClientUI-R1\", \"LobbyAdminServerAPI-R1\", \r\n                \"LobbyHeartbeatAutomationUI-R1\", \"HubspotIntegrationAPI-R1\",\r\n                \"LobbyMiddlewareAPI-R1\", \"LobbyAdminPanelUI-R1\", \r\n                \"LobbyServerAPI-R1\"\r\n            ]\r\n        },\r\n        \"HWAI-ProductIntel\": {\r\n            users: [\r\n                \"ankit_sde@hwai\", \"ArulTEG\", \"bindu-e\", \"Kritika-sharma12\", \r\n                \"Mukul Kumar\", \"Promod Kr Verma\", \"satyajeet-HealthworksAI\", \r\n                \"Rajeev Rawat\", \"vibhore-go\", \"vidushi-chaudhary\"\r\n            ],\r\n            repositories: [\r\n                \"ChatbotEOCUI-R1\", \"ChatbotEOCAPI-R1\", \"ChatbotEOCModel-R1\",\r\n                \"PlanComparisonUI-R4\", \"PlanComparisonAPI-R4\"\r\n            ]\r\n        }\r\n    };\r\n\r\n    if (!selectedOrg || !ORGANIZATIONS[selectedOrg]) {\r\n        console.error(\"❌ Invalid Organization Selected\");\r\n        return [];\r\n    }\r\n\r\n    const USERS = ORGANIZATIONS[selectedOrg].users;\r\n    const REPOSITORIES = ORGANIZATIONS[selectedOrg].repositories;\r\n    const TOKEN = process.env.REACT_APP_GITHUB_PAT; // Ensure your .env file has this\r\n\r\n    // Get commits from the last year\r\n    const oneYearAgo = new Date();\r\n    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\r\n    const sinceDate = oneYearAgo.toISOString();\r\n\r\n    let contributions = [];\r\n\r\n    for (const repo of REPOSITORIES) {\r\n        const url = `https://api.github.com/repos/${selectedOrg}/${repo}/commits?since=${sinceDate}`;\r\n\r\n        try {\r\n            const response = await fetch(url, {\r\n                headers: { Authorization: `token ${TOKEN}` }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                console.error(`❌ Failed to fetch data for ${repo}:`, response.statusText);\r\n                continue;\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            data.forEach(commit => {\r\n                if (commit.author && USERS.includes(commit.author.login)) {\r\n                    const username = commit.author.login;\r\n                    const existingEntry = contributions.find(entry => entry.user === username && entry.repository === repo);\r\n\r\n                    if (existingEntry) {\r\n                        existingEntry.count += 1;\r\n                    } else {\r\n                        contributions.push({\r\n                            user: username,\r\n                            repository: repo,\r\n                            count: 1\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error(`❌ Error fetching commits for ${repo}:`, error);\r\n        }\r\n    }\r\n\r\n    // Calculate total commits for percentage\r\n    const totalCommits = contributions.reduce((sum, entry) => sum + entry.count, 0);\r\n    contributions = contributions.map(entry => ({\r\n        ...entry,\r\n        percentage: totalCommits > 0 ? ((entry.count / totalCommits) * 100).toFixed(2) : 0\r\n    }));\r\n\r\n    console.log(`✅ Final Contribution Data for ${selectedOrg}:`, contributions);\r\n    return contributions;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}